// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reservations.sql

package database

import (
	"context"
	"time"
)

const getReservationsByUserId = `-- name: GetReservationsByUserId :many
SELECT
    res.user_id,
    res.restaurant_id,
    res.time
FROM 
    reservations res 
LEFT JOIN 
    users u ON res.user_id = u.id
WHERE 
    res.is_active = true AND res.user_id = $1
`

type GetReservationsByUserIdRow struct {
	UserID       int32
	RestaurantID int32
	Time         time.Time
}

func (q *Queries) GetReservationsByUserId(ctx context.Context, userID int32) ([]GetReservationsByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getReservationsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReservationsByUserIdRow
	for rows.Next() {
		var i GetReservationsByUserIdRow
		if err := rows.Scan(&i.UserID, &i.RestaurantID, &i.Time); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
